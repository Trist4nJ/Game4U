from database import get_connection
from datetime import date

def rechercher_jeux():
    mot_cle = input("üîç Entrez un mot-cl√© pour rechercher un jeu : ")
    conn = get_connection()
    cursor = conn.cursor(dictionary=True)

    query = "SELECT * FROM Jeu WHERE nom LIKE %s OR description_jeu LIKE %s"
    wildcard = f"%{mot_cle}%"
    cursor.execute(query, (wildcard, wildcard))
    resultats = cursor.fetchall()

    if resultats:
        print("\nüéØ R√©sultats trouv√©s :")
        for jeu in resultats:
            print(f"{jeu['id_jeu']}. {jeu['nom']} - {jeu['description_jeu']} (Stock: {jeu['stock']})")
    else:
        print("‚ùå Aucun jeu trouv√©.")

    cursor.close()
    conn.close()

def louer_jeu(id_utilisateur):
    id_jeu = input("üì¶ Entrez l'ID du jeu √† louer : ")
    conn = get_connection()
    cursor = conn.cursor(dictionary=True)

    try:
        conn.start_transaction()

        cursor.execute("SELECT * FROM Jeu WHERE id_jeu = %s", (id_jeu,))
        jeu = cursor.fetchone()

        if jeu and jeu['stock'] > 0:
            cursor.execute("""
                INSERT INTO Location (id_utilisateur, id_jeu, date_location)
                VALUES (%s, %s, %s)
            """, (id_utilisateur, id_jeu, date.today()))

            cursor.execute("UPDATE Jeu SET stock = stock - 1 WHERE id_jeu = %s", (id_jeu,))
            conn.commit()
            print(f"\n‚úÖ '{jeu['nom']}' a √©t√© lou√© avec succ√®s !")
        else:
            print("‚ùå Ce jeu n'existe pas ou n'est plus disponible.")
            conn.rollback()

    except Exception as e:
        print(f"Erreur lors de la location : {e}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()


def afficher_locations_en_cours(id_utilisateur):
    conn = get_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("""
        SELECT J.nom, L.date_location
        FROM Location L
        JOIN Jeu J ON L.id_jeu = J.id_jeu
        WHERE L.id_utilisateur = %s AND L.date_retour IS NULL
    """, (id_utilisateur,))
    locations = cursor.fetchall()

    if locations:
        print("\nüì¶ Locations en cours :")
        for loc in locations:
            print(f"- {loc['nom']} (lou√© le {loc['date_location']})")
    else:
        print("üü¢ Aucune location en cours.")

    cursor.close()
    conn.close()


def retourner_un_jeu(id_utilisateur):
    conn = get_connection()
    cursor = conn.cursor(dictionary=True)

    cursor.execute("""
        SELECT L.id_location, J.nom
        FROM Location L
        JOIN Jeu J ON L.id_jeu = J.id_jeu
        WHERE L.id_utilisateur = %s AND L.date_retour IS NULL
    """, (id_utilisateur,))
    locations = cursor.fetchall()

    if not locations:
        print("‚ùå Vous n'avez aucune location √† retourner.")
        cursor.close()
        conn.close()
        return

    print("\nüéÆ Jeux √† retourner :")
    for idx, loc in enumerate(locations, 1):
        print(f"{idx}. {loc['nom']}")

    try:
        choix = int(input("Num√©ro du jeu √† retourner : "))
        id_location = locations[choix - 1]['id_location']
        conn.start_transaction()

        cursor.execute("""
            UPDATE Location
            SET date_retour = CURDATE(), statut = 'retourn√©e'
            WHERE id_location = %s
        """, (id_location,))

        cursor.execute("""
            UPDATE Jeu
            SET stock = stock + 1
            WHERE id_jeu = (SELECT id_jeu FROM Location WHERE id_location = %s)
        """, (id_location,))

        conn.commit()
        print("‚úÖ Jeu retourn√© avec succ√®s.")

    except (ValueError, IndexError):
        print("‚õî Choix invalide.")
        conn.rollback()
    except Exception as e:
        print(f"Erreur : {e}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()
